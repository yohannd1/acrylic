%:title Acrylic parser to-do list

Very meta to have the to-do list in the format itself hehe

(x) Inline LaTeX math support (`${}`)
(x) HTML - Don't use `<br/>` for line separation. Instead use `<p>` and two classes for the two kinds of line spacing.
(x) KaTeX - initial setup
(x) Parse "display math" (the one that's not inline - `$${}`)
(x) implement `$$:` and `$:` syntax
(x) Parse header
(x) Get indent option (default=2, and can be tab if chosen)
(x) implement inline *bold*, _italic_, _*bold-italic*_ and `code`
(x) Parse the rest of the document, with `indent` being the indent unit
(x) Parse error handling (at least error out! for the love of god)
(x) Turn this into an actual program
(x) Make `spaced` an attribute of lines (specially because the `:line-latex` rule can also be spaced sometimes!)
(x) Implement tasks
(x) HTML - escape sequences + proper output ( get it from https://github.com/yohannd1/yohannd1.github.io )
(x) Implement `%tags`

( ) Implement folding via `%-fold`

( ) implement `@functions{}`

( ) URL detection (can be turned off with `%:autoUrl` and manually on for a single thing with `@url`, kinda like `@ref`)

( ) Cuter CSS

( ) KaTeX - automated download (maybe use npm? :sob:)

( ) Handle escaping characters inside inline text variants (bold/italic/code) -- or maybe not? And instead just let them on `@bold`, `@codeinline` and `@italic` or whatever I call them
  - maybe `@ib` for bold, `@ic` for code and `@ii` for italic (inline-bold, inline-code, ...)

( ) Keyword arguments as [kw{arg}{arg}] and positional arguments as {}. Would make things easier for me. Scribble-based.

( ) raw args?
  @code:
  @code[lang{Bom dia}]#{{
    this is raw but left-trimmed data
  }}
  \@end
  @end

( ) Implement folding via `@fold`

( ) Implement `@ref` (oh god that will be kind of tough)

( ) optional JS tools (searching for tags, TODOs and incomplete ttasks)

( ) automated tests. would be hella useful.

( ) FSM parsing using C++, rust, dunno (probably faster and... honestly, easier to debug and maintain)
